# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-py:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black mypy pytest types-tabulate types-PyYAML
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 mrpast --count --select=E9,F63,F7,F82,F401 --show-source --statistics
    - name: Check code formatting (black)
      run: |
        black --check mrpast/ setup.py test/ scripts/ --exclude "third-party"
    - name: Check types (mypy)
      run: |
        mypy mrpast --no-namespace-packages --ignore-missing-imports
    - name: Test with pytest
      run: |
        PYTHONPATH=$PWD pytest test/

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            fcheck_command: echo No clang-format on MacOS
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            fcheck_command: ./format-check.sh
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            fcheck_command: ./format-check.sh
        exclude:
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Check
      working-directory: ${{ github.workspace }}
      run: ${{ matrix.fcheck_command }}
